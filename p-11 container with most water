# p-11 container with most water
# Brute Approach
class Solution {
    public int maxArea(int[] height) {
        int maxWater = 0;
        int n = height.length;
        
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int width = j - i;
                int h = Math.min(height[i], height[j]);
                int area = width * h;
                maxWater = Math.max(maxWater, area);
            }
        }
        
        return maxWater;
    }
}

#optimal approach : Two pointer
class Solution {
    public int maxArea(int[] height) {
        int maxWater = 0;
        int left = 0;
        int right = height.length - 1;
        
        while (left < right) {
            int width = right - left;
            int h = Math.min(height[left], height[right]);
            int area = width * h;
            maxWater = Math.max(maxWater, area);
            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }
        
        return maxWater;
    }
}
